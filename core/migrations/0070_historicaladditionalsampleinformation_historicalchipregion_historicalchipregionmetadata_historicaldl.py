# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-03-14 23:38
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0069_auto_20190314_1224'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalAdditionalSampleInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('tissue_state', models.CharField(blank=True, choices=[('NONE', 'None'), ('FROZ', 'Frozen'), ('FRES', 'Fresh'), ('DIG-FRES', 'Digested-Fresh')], default='NONE', max_length=50, null=True, verbose_name='Tissue State')),
                ('cancer_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cancer Type')),
                ('cancer_subtype', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cancer Subtype')),
                ('disease_condition_health_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Disease condition/health status')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('X', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Sex')),
                ('patient_biopsy_date', models.DateField(blank=True, null=True, verbose_name='Patient biopsy date')),
                ('anatomic_site', models.CharField(max_length=50, null=True, verbose_name='Anatomic site')),
                ('anatomic_sub_site', models.CharField(blank=True, max_length=50, null=True, verbose_name='Anatomic sub-site')),
                ('developmental_stage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Developmental stage')),
                ('tissue_type', models.CharField(choices=[('N', 'Normal'), ('B', 'Benign'), ('PM', 'Pre-malignant'), ('M', 'Malignant'), ('NNP', 'Non-neoplastic Disease'), ('U', 'Undetermined'), ('HP', 'Hyperplasia'), ('MP', 'Metaplasia'), ('DP', 'Dysplasia')], max_length=50, null=True, verbose_name='Tissue type')),
                ('cell_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cell type')),
                ('pathology_disease_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Pathology/disease name (for diseased samples only)')),
                ('additional_pathology_info', models.CharField(blank=True, max_length=50, null=True, verbose_name='Additional pathology information')),
                ('grade', models.CharField(blank=True, max_length=50, null=True, verbose_name='Grade')),
                ('stage', models.CharField(blank=True, max_length=50, null=True, verbose_name='Stage')),
                ('tumour_content', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tumor content (%)')),
                ('pathology_occurrence', models.CharField(blank=True, choices=[('PR', 'Primary'), ('RC', 'Recurrent or Relapse'), ('ME', 'Metastatic'), ('RM', 'Remission'), ('UN', 'Undetermined'), ('US', 'Unspecified')], max_length=50, null=True, verbose_name='Pathology occurrence')),
                ('treatment_status', models.CharField(blank=True, choices=[('PR', 'Pre-treatment'), ('IN', 'In-treatment'), ('PO', 'Post-treatment'), ('NA', 'N/A'), ('UN', 'Unknown')], max_length=50, null=True, verbose_name='Treatment status')),
                ('family_information', models.CharField(blank=True, max_length=50, null=True, verbose_name='Family information')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample', verbose_name='Sample')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'additional_sample_information_history',
                'verbose_name': 'historical additional sample information',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalChipRegion',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('region_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='region_code')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'chip_region_history',
                'verbose_name': 'historical chip region',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalChipRegionMetadata',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('metadata_value', models.CharField(blank=True, max_length=50, null=True, verbose_name='Metadata value')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('chip_region', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ChipRegion', verbose_name='Chip_Region')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metadata_field', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.MetadataField', verbose_name='Metadata key')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'chip_region_metadata_history',
                'verbose_name': 'historical chip region metadata',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLane',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencing_date', models.DateTimeField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sequencing', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpSequencing', verbose_name='Sequencing')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'dlp_history_lane',
                'verbose_name': 'historical dlp lane',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibraryConstructionInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('chip_format', models.CharField(blank=True, choices=[('W', 'Wafergen'), ('M', 'Microfluidic'), ('B', 'Bulk'), ('O', 'Other')], default='W', max_length=50, null=True, verbose_name='Chip format')),
                ('library_construction_method', models.CharField(blank=True, default='Nextera (Illumina)', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='genome', max_length=50, null=True, verbose_name='Library type')),
                ('library_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Library notes')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('number_of_pcr_cycles', models.IntegerField(blank=True, null=True, verbose_name='Number of PCR cycles')),
                ('protocol', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Protocol')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'dlp_history_library_construction_information',
                'verbose_name': 'historical dlp library construction information',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibraryQuantificationAndStorage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('average_size', models.IntegerField(blank=True, null=True, verbose_name='Average size (bp)')),
                ('dna_concentration_nm', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (nM)')),
                ('dna_concentration_ngul', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='DNA concentration (ng/uL)')),
                ('dna_volume', models.CharField(blank=True, max_length=50, null=True, verbose_name='DNA volume (uL)')),
                ('freezer', models.CharField(blank=True, max_length=50, null=True, verbose_name='Freezer')),
                ('rack', models.IntegerField(blank=True, null=True, verbose_name='Rack')),
                ('shelf', models.IntegerField(blank=True, null=True, verbose_name='Shelf')),
                ('box', models.IntegerField(blank=True, null=True, verbose_name='Box')),
                ('position_in_box', models.IntegerField(blank=True, null=True, verbose_name='Position in box')),
                ('library_tube_label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Library tube label')),
                ('quantification_method', models.CharField(blank=True, default='Bioanalyzer', max_length=50, null=True, verbose_name='Quantification method')),
                ('size_range', models.CharField(blank=True, max_length=50, null=True, verbose_name='Size range (bp)')),
                ('size_selection_method', models.CharField(blank=True, default='AmpureXP', max_length=50, null=True, verbose_name='Size selection method')),
                ('storage_medium', models.CharField(blank=True, default='TE 10:0.1', max_length=50, null=True, verbose_name='Storage medium')),
                ('agilent_bioanalyzer_xad', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer image file')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'dlp_history_library_q_and_s',
                'verbose_name': 'historical dlp library quantification and storage',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDlpLibrarySampleDetail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_spot_date', models.DateField(blank=True, null=True, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC')], max_length=50, null=True, verbose_name='Spotting location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'dlp_history_library_sample_detail',
                'verbose_name': 'historical dlp library sample detail',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalJiraUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('name', models.CharField(max_length=150)),
                ('associated_with_dlp', models.BooleanField(default=True)),
                ('associated_with_tenx', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'jira_user_history',
                'verbose_name': 'historical jira user',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMetadataField',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('field', models.CharField(max_length=50, verbose_name='Metadata key')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'metadata_history',
                'verbose_name': 'historical metadata field',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPbalLane',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencing_date', models.DateTimeField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sequencing', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalSequencing', verbose_name='Sequencing')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_lane',
                'verbose_name': 'historical pbal lane',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPbalLibraryConstructionInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('format', models.CharField(blank=True, default='384-well plate', max_length=50, null=True, verbose_name='Format')),
                ('library_construction_method', models.CharField(blank=True, default='pbal', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='methylome', max_length=50, null=True, verbose_name='Library type')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library_prep_location', models.CharField(blank=True, default='Hirst Lab', max_length=50, null=True, verbose_name='Library prep location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_library_construction_information',
                'verbose_name': 'historical pbal library construction information',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPbalLibraryQuantificationAndStorage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_library_q_and_s',
                'verbose_name': 'historical pbal library quantification and storage',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPbalLibrarySampleDetail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_spot_date', models.DateField(blank=True, null=True, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('AD', 'Aparicio Lab - Deckard'), ('AR', 'Aparicio Lab - Rachael'), ('H', 'Hansen Lab'), ('G', 'GSC'), ('T', 'TFL flow facility')], max_length=50, null=True, verbose_name='Spotting location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_library_sample_detail',
                'verbose_name': 'historical pbal library sample detail',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPlate',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('jira_ticket', models.CharField(max_length=50, verbose_name='Jira ticket')),
                ('plate_number', models.IntegerField(blank=True, null=True, verbose_name='Plate number')),
                ('plate_status', models.CharField(blank=True, choices=[('submitted', 'submitted'), ('sequenced', 'sequenced'), ('stored', 'stored')], max_length=50, null=True, verbose_name='Plate status')),
                ('plate_location', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Plate location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_plate_history',
                'verbose_name': 'historical plate',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSublibraryInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sample', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample')),
                ('row', models.IntegerField(blank=True, null=True, verbose_name='Row')),
                ('column', models.IntegerField(blank=True, null=True, verbose_name='Column')),
                ('img_col', models.IntegerField(blank=True, null=True, verbose_name='Image Column')),
                ('file_ch1', models.CharField(blank=True, max_length=50, null=True, verbose_name='File_Ch1')),
                ('file_ch2', models.CharField(blank=True, max_length=50, null=True, verbose_name='File_Ch2')),
                ('fld_section', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fld_Section')),
                ('fld_index', models.CharField(blank=True, max_length=50, null=True, verbose_name='Fld_Index')),
                ('num_live', models.IntegerField(blank=True, null=True, verbose_name='Num_Live')),
                ('num_dead', models.IntegerField(blank=True, null=True, verbose_name='Num_Dead')),
                ('num_other', models.IntegerField(blank=True, null=True, verbose_name='Num_Other')),
                ('rev_live', models.IntegerField(blank=True, null=True, verbose_name='Rev_Live')),
                ('rev_dead', models.IntegerField(blank=True, null=True, verbose_name='Rev_Dead')),
                ('rev_other', models.IntegerField(blank=True, null=True, verbose_name='Rev_Other')),
                ('condition', models.CharField(blank=True, max_length=50, null=True, verbose_name='experimental_condition')),
                ('index_i7', models.CharField(blank=True, max_length=50, null=True, verbose_name='Index_I7')),
                ('primer_i7', models.CharField(blank=True, max_length=50, null=True, verbose_name='Primer_I7')),
                ('index_i5', models.CharField(blank=True, max_length=50, null=True, verbose_name='Index_I5')),
                ('primer_i5', models.CharField(blank=True, max_length=50, null=True, verbose_name='Primer_I5')),
                ('pick_met', models.CharField(blank=True, max_length=50, null=True, verbose_name='cell_call')),
                ('spot_well', models.CharField(blank=True, max_length=50, null=True, verbose_name='Spot_Well')),
                ('num_drops', models.IntegerField(blank=True, null=True, verbose_name='Num_Drops')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('chip_region', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ChipRegion', verbose_name='Chip_Region')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.DlpLibrary', verbose_name='Library')),
                ('sample_id', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample', verbose_name='Sample_ID')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'sub_library_information_history',
                'verbose_name': 'historical sublibrary information',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxChip',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('lab_name', models.CharField(blank=True, choices=[('SA', 'Sam Aparicio'), ('DH', 'David Huntsman')], default='SA', max_length=50, null=True, verbose_name='Lab Name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_chip',
                'verbose_name': 'historical tenx chip',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxCondition',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('condition_id', models.IntegerField(blank=True, null=True, verbose_name='Condition_ID')),
                ('experimental_condition', models.CharField(blank=True, max_length=50, null=True, verbose_name='Experimental_condition')),
                ('enzyme', models.CharField(blank=True, max_length=50, null=True, verbose_name='Enzyme')),
                ('digestion_temperature', models.CharField(blank=True, max_length=50, null=True, verbose_name='Digestion_Temperature')),
                ('live_dead', models.CharField(blank=True, max_length=50, null=True, verbose_name='Live/Dead')),
                ('cells_targeted', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cells_Targeted')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxLibrary', verbose_name='Library')),
                ('sample', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample', verbose_name='Sample')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_condition',
                'verbose_name': 'historical tenx condition',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLane',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
                ('sequencing_date', models.DateTimeField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sequencing', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxSequencing', verbose_name='Sequencing')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_lane',
                'verbose_name': 'historical tenx lane',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibraryConstructionInformation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('library_construction_method', models.CharField(blank=True, default='10x Genomics', max_length=50, null=True, verbose_name='Library construction method')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library_prep_location', models.CharField(blank=True, default='UBC-BRC', max_length=50, null=True, verbose_name='Library prep location')),
                ('chip_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Chip lot number')),
                ('reagent_lot_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Reagent lot number')),
                ('library_type', models.CharField(blank=True, choices=[(b"5'", b"5'"), (b"3'", b"3'"), (b'V(D)J', b'V(D)J')], max_length=20, null=True, verbose_name='Library type')),
                ('index_used', models.CharField(blank=True, choices=[(b'SI_GA-A1,GGTTTACT,CTAAACGG,TCGGCGTC,AACCGTAA', b'SI-GA_A1'), (b'SI-GA-A2,TTTCATGA,ACGTCCCT,CGCATGTG,GAAGGAAC', b'SI-GA-A2'), (b'SI-GA-A3,CAGTACTG,AGTAGTCT,GCAGTAGA,TTCCCGAC', b'SI-GA-A3'), (b'SI-GA-A4,TATGATTC,CCCACAGT,ATGCTGAA,GGATGCCG', b'SI-GA-A4'), (b'SI-GA-A5,CTAGGTGA,TCGTTCAG,AGCCAATT,GATACGCC', b'SI-GA-A5'), (b'SI-GA-A6,CGCTATGT,GCTGTCCA,TTGAGATC,AAACCGAG', b'SI-GA-A6'), (b'SI-GA-A7,ACAGAGGT,TATAGTTG,CGGTCCCA,GTCCTAAC', b'SI-GA-A7'), (b'SI-GA-A8,GCATCTCC,TGTAAGGT,CTGCGATG,AACGTCAA', b'SI-GA-A8'), (b'SI-GA-A9,TCTTAAAG,CGAGGCTC,GTCCTTCT,AAGACGGA', b'SI-GA-A9'), (b'SI-GA-A10,GAAACCCT,TTTCTGTC,CCGTGTGA,AGCGAAAG', b'SI-GA-A10'), (b'SI-GA-A11,GTCCGGTC,AAGATCAT,CCTGAAGG,TGATCTCA', b'SI-GA-A11'), (b'SI-GA-A12,AGTGGAAC,GTCTCCTT,TCACATCA,CAGATGGG', b'SI-GA-A12'), (b'SI-GA-B1,GTAATCTT,TCCGGAAG,AGTTCGGC,CAGCATCA', b'SI-GA-B1'), (b'SI-GA-B2,TACTCTTC,CCTGTGCG,GGACACGT,ATGAGAAA', b'SI-GA-B2'), (b'SI-GA-B3,GTGTATTA,TGTGCGGG,ACCATAAC,CAACGCCT', b'SI-GA-B3'), (b'SI-GA-B4,ACTTCATA,GAGATGAC,TGCCGTGG,CTAGACCT', b'SI-GA-B4'), (b'SI-GA-B5,AATAATGG,CCAGGGCA,TGCCTCAT,GTGTCATC', b'SI-GA-B5'), (b'SI-GA-B6,CGTTAATC,GCCACGCT,TTACTCAG,AAGGGTGA', b'SI-GA-B6'), (b'SI-GA-B7,AAACCTCA,GCCTTGGT,CTGGACTC,TGTAGAAG', b'SI-GA-B7'), (b'SI-GA-B8,AAAGTGCT,GCTACCTG,TGCTGTAA,CTGCAAGC', b'SI-GA-B8'), (b'SI-GA-B9,CTGTAACT,TCTAGCGA,AGAGTGTG,GACCCTAC', b'SI-GA-B9'), (b'SI-GA-B10,ACCGTATG,GATTAGAT,CTGACTGA,TGACGCCC', b'SI-GA-B10'), (b'SI-GA-B11,GTTCCTCA,AGGTACGC,TAAGTATG,CCCAGGAT', b'SI-GA-B11'), (b'SI-GA-B12,TACCACCA,CTAAGTTT,GGGTCAAG,ACTGTGGC', b'SI-GA-B12'), (b'SI-GA-C1,CCACTTAT,AACTGGCG,TTGGCATA,GGTAACGC', b'SI-GA-C1'), (b'SI-GA-C2,CCTAGACC,ATCTCTGT,TAGCTCTA,GGAGAGAG', b'SI-GA-C2'), (b'SI-GA-C3,TCAGCCGT,CAGAGGCC,GGTCAATA,ATCTTTAG', b'SI-GA-C3'), (b'SI-GA-C4,ACAATTCA,TGCGCAGC,CATCACTT,GTGTGGAG', b'SI-GA-C4'), (b'SI-GA-C5,CGACTTGA,TACAGACT,ATTGCGTG,GCGTACAC', b'SI-GA-C5'), (b'SI-GA-C6,ATTACTTC,TGCGAACT,GCATTCGG,CAGCGGAA', b'SI-GA-C6'), (b'SI-GA-C7,GTCTCTCG,AATCTCTC,CGGAGGGA,TCAGAAAT', b'SI-GA-C7'), (b'SI-GA-C8,GTTGAGAA,AGATCTGG,TCGATACT,CACCGCTC', b'SI-GA-C8'), (b'SI-GA-C9,GCGCAGAA,ATCTTACC,TATGGTGT,CGAACCTG', b'SI-GA-C9'), (b'SI-GA-C10,TCTCAGTG,GAGACTAT,CGCTTAGC,ATAGGCCA', b'SI-GA-C10'), (b'SI-GA-C11,GAGGATCT,AGACCATA,TCCTGCGC,CTTATGAG', b'SI-GA-C11'), (b'SI-GA-C12,TCTCGTTT,GGCTAGCG,ATGACCGC,CAAGTAAA', b'SI-GA-C12'), (b'SI-GA-D1,CACTCGGA,GCTGAATT,TGAAGTAC,ATGCTCCG', b'SI-GA-D1'), (b'SI-GA-D2,TAACAAGG,GGTTCCTC,ATCATGCA,CCGGGTAT', b'SI-GA-D2'), (b'SI-GA-D3,ACATTACT,TTTGGGTA,CAGCCCAC,GGCAATGG', b'SI-GA-D3'), (b'SI-GA-D4,CCCTAACA,ATTCCGAT,TGGATTGC,GAAGGCTG', b'SI-GA-D4'), (b'SI-GA-D5,CTCGTCAC,GATCAGCA,ACAACAGG,TGGTGTTT', b'SI-GA-D5'), (b'SI-GA-D6,CATGCGAT,TGATATTC,GTGATCGA,ACCCGACG', b'SI-GA-D6'), (b'SI-GA-D7,ATTTGCTA,TAGACACC,CCACAGGG,GGCGTTAT', b'SI-GA-D7'), (b'SI-GA-D8,GCAACAAA,TAGTTGTC,CGCCATCG,ATTGGCGT', b'SI-GA-D8'), (b'SI-GA-D9,AGGAGATG,GATGTGGT,CTACATCC,TCCTCCAA', b'SI-GA-D9'), (b'SI-GA-D10,CAATACCC,TGTCTATG,ACCACGAA,GTGGGTGT', b'SI-GA-D10'), (b'SI-GA-D11,CTTTGCGG,TGCACAAA,AAGCAGTC,GCAGTTCT', b'SI-GA-D11'), (b'SI-GA-D12,GCACAATG,CTTGGTAC,TGCACCGT,AAGTTGCA', b'SI-GA-D12'), (b'SI-GA-E1,TGGTAAAC,GAAAGGGT,ACTGCTCG,CTCCTCTA', b'SI-GA-E1'), (b'SI-GA-E2,GTGGTACC,TACTATAG,ACAAGGTA,CGTCCCGT', b'SI-GA-E2'), (b'SI-GA-E3,AGGTATTG,CTCCTAGT,TCAAGGCC,GATGCCAA', b'SI-GA-E3'), (b'SI-GA-E4,TTCGCCCT,GGATGGGC,AATCAATG,CCGATTAA', b'SI-GA-E4'), (b'SI-GA-E5,CATTAGCG,TTCGCTGA,ACAAGAAT,GGGCTCTC', b'SI-GA-E5'), (b'SI-GA-E6,CTGCGGCT,GACTCAAA,AGAAACTC,TCTGTTGG', b'SI-GA-E6'), (b'SI-GA-E7,CACGCCTT,GTATATAG,TCTCGGGC,AGGATACA', b'SI-GA-E7'), (b'SI-GA-E8,ATAGTTAC,TGCTGAGT,CCTACGTA,GAGCACCG', b'SI-GA-E8'), (b'SI-GA-E9,TTGTTTCC,GGAGGAGG,CCTAACAA,AACCCGTT', b'SI-GA-E9'), (b'SI-GA-E10,AAATGTGC,GGGCAAAT,TCTATCCG,CTCGCGTA', b'SI-GA-E10'), (b'SI-GA-E11,AAGCGCTG,CGTTTGAT,GTAGCACA,TCCAATGC', b'SI-GA-E11'), (b'SI-GA-E12,ACCGGCTC,GAGTTAGT,CGTCCTAG,TTAAAGCA', b'SI-GA-E12'), (b'SI-GA-F1,GTTGCAGC,TGGAATTA,CAATGGAG,ACCCTCCT', b'SI-GA-F1'), (b'SI-GA-F2,TTTACATG,CGCGATAC,ACGCGGGT,GAATTCCA', b'SI-GA-F2'), (b'SI-GA-F3,TTCAGGTG,ACGGACAT,GATCTTGA,CGATCACC', b'SI-GA-F3'), (b'SI-GA-F4,CCCAATAG,GTGTCGCT,AGAGTCGC,TATCGATA', b'SI-GA-F4'), (b'SI-GA-F5,GACTACGT,CTAGCGAG,TCTATATC,AGGCGTCA', b'SI-GA-F5'), (b'SI-GA-F6,CGGAGCAC,GACCTATT,ACTTAGGA,TTAGCTCG', b'SI-GA-F6'), (b'SI-GA-F7,CGTGCAGA,AACAAGAT,TCGCTTCG,GTATGCTC', b'SI-GA-F7'), (b'SI-GA-F8,CATGAACA,TCACTCGC,AGCTGGAT,GTGACTTG', b'SI-GA-F8'), (b'SI-GA-F9,CAAGCTCC,GTTCACTG,TCGTGAAA,AGCATGGT', b'SI-GA-F9'), (b'SI-GA-F10,GCTTGGCT,AAACAAAC,CGGGCTTA,TTCATCGG', b'SI-GA-F10'), (b'SI-GA-F11,GCGAGAGT,TACGTTCA,AGTCCCAC,CTATAGTG', b'SI-GA-F11'), (b'SI-GA-F12,TGATGCAT,GCTACTGA,CACCTGCC,ATGGAATG', b'SI-GA-F12'), (b'SI-GA-G1,ATGAATCT,GATCTCAG,CCAGGAGC,TGCTCGTA', b'SI-GA-G1'), (b'SI-GA-G2,TGATTCTA,ACTAGGAG,CAGCCACT,GTCGATGC', b'SI-GA-G2'), (b'SI-GA-G3,CCTCATTC,AGCATCCG,GTGGCAAT,TAATGGGA', b'SI-GA-G3'), (b'SI-GA-G4,GCGATGTG,AGATACAA,TTTCCACT,CACGGTGC', b'SI-GA-G4'), (b'SI-GA-G5,GAGCAAGA,TCTGTGAT,CGCAGTTC,ATATCCCG', b'SI-GA-G5'), (b'SI-GA-G6,CTGACGCG,GGTCGTAC,TCCTTCTT,AAAGAAGA', b'SI-GA-G6'), (b'SI-GA-G7,GGTATGCA,CTCGAAAT,ACACCTTC,TAGTGCGG', b'SI-GA-G7'), (b'SI-GA-G8,TATGAGCT,CCGATAGC,ATACCCAA,GGCTGTTG', b'SI-GA-G8'), (b'SI-GA-G9,TAGGACGT,ATCCCACA,GGAATGTC,CCTTGTAG', b'SI-GA-G9'), (b'SI-GA-G10,TCGCCAGC,AATGTTAG,CGATAGCT,GTCAGCTA', b'SI-GA-G10'), (b'SI-GA-G11,TTATCGTT,AGCAGAGC,CATCTCCA,GCGGATAG', b'SI-GA-G11'), (b'SI-GA-G12,ATTCTAAG,CCCGATTA,TGGAGGCT,GAATCCGC', b'SI-GA-G12'), (b'SI-GA-H1,GTATGTCA,TGTCAGAC,CACGTCGG,ACGACATT', b'SI-GA-H1'), (b'SI-GA-H2,TAATGACC,ATGCCTTA,GCCGAGAT,CGTATCGG', b'SI-GA-H2'), (b'SI-GA-H3,CCAAGATG,AGGCCCGA,TACGTGAC,GTTTATCT', b'SI-GA-H3'), (b'SI-GA-H4,GCCATTCC,CAAGAATT,TTGCCGGA,AGTTGCAG', b'SI-GA-H4'), (b'SI-GA-H5,CCACTACA,GATTCTGG,TGCGGCTT,ATGAAGAC', b'SI-GA-H5'), (b'SI-GA-H6,TAGGATAA,CCTTTGTC,GTACGCGG,AGCACACT', b'SI-GA-H6'), (b'SI-GA-H7,AGCTATCA,CATATAAC,TCAGGGTG,GTGCCCGT', b'SI-GA-H7'), (b'SI-GA-H8,TTGTTGAT,GCTCAACC,CAAAGTGG,AGCGCCTA', b'SI-GA-H8'), (b'SI-GA-H9,ACACTGTT,CAGGATGG,GGCTGAAC,TTTACCCA', b'SI-GA-H9'), (b'SI-GA-H10,GTAATTGC,AGTCGCTT,CACGAGAA,TCGTCACG', b'SI-GA-H10'), (b'SI-GA-H11,GGCGAGTA,ACTTCTAT,CAAATACG,TTGCGCGC', b'SI-GA-H11'), (b'SI-GA-H12,GACAGCAT,TTTGTACA,AGGCCGTG,CCATATGC', b'SI-GA-H12')], max_length=150, null=True, verbose_name='Index used')),
                ('pool', models.CharField(blank=True, max_length=150, null=True, verbose_name='Pool')),
                ('concentration', models.PositiveIntegerField(blank=True, null=True, verbose_name='DNA concentration (nM)')),
                ('chemistry_version', models.CharField(choices=[(b'VERSION_2', b'v2'), (b'VERSION_3', b'v3')], default='VERSION_2', max_length=150, null=True, verbose_name='Chemistry Version')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_library_construction_information',
                'verbose_name': 'historical tenx library construction information',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibraryQuantificationAndStorage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('agilent_bioanalyzer_xad', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer xad file')),
                ('agilent_bioanalyzer_image', models.TextField(blank=True, max_length=200, null=True, verbose_name='Agilent bioanalyzer image file')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_library_q_and_s',
                'verbose_name': 'historical tenx library quantification and storage',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibrarySampleDetail',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_prep_date', models.DateField(blank=True, null=True, verbose_name='Sample prep date')),
                ('sorting_location', models.CharField(blank=True, default='TFL flow facility', max_length=50, null=True, verbose_name='Sorting location')),
                ('num_cells_targeted', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Number of cells targeted')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxLibrary', verbose_name='Library')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_library_sample_detail',
                'verbose_name': 'historical tenx library sample detail',
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
